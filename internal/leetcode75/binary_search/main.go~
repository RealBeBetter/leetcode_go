package main

import (
	"fmt"
	"math"
	"math/rand"
	"sort"
)

/**
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * func guess(num int) int;
 */

// 374. 猜数字大小
// https://leetcode.cn/problems/guess-number-higher-or-lower
func guessNumber(n int) int {
	left, right := 1, n
	for left <= right {
		mid := left + (right-left)/2
		if guess(mid) == -1 {
			right = mid - 1
		} else if guess(mid) == 1 {
			left = mid + 1
		} else {
			return mid
		}
	}

	return 0
}

func guess(num int) int {
	if rand.Int31() > 0 {
		return 1
	}

	return -1
}

// ------------------------------------------------------

// 2300. 咒语和药水的成功对数
// https://leetcode.cn/problems/successful-pairs-of-spells-and-potions
func successfulPairs(spells []int, potions []int, success int64) []int {
	res := make([]int, len(spells))
	sort.Ints(potions)

	for i := 0; i < len(spells); i++ {
		res[i] = searchCnt(spells[i], potions, success)
	}

	return res
}

func searchCnt(spell int, potions []int, success int64) int {
	left, right := 0, len(potions)-1
	// 二分查找，找到第一个 >= success 的数
	for left <= right {
		mid := left + (right-left)/2
		if int64(potions[mid]*spell) >= success {
			right = mid - 1
		} else {
			left = mid + 1
		}
	}

	return len(potions) - left
}

// ------------------------------------------------------

// 162. 寻找峰值
// https://leetcode.cn/problems/find-peak-element
func findPeakElement(nums []int) int {
	left, right := 0, len(nums)-1
	for left < right {
		mid := left + (right-left)/2
		if nums[mid] < nums[mid+1] {
			left = mid + 1
		} else {
			right = mid
		}
	}

	return left
}

// ------------------------------------------------------

// 875. 爱吃香蕉的珂珂
// https://leetcode.cn/problems/koko-eating-bananas
func minEatingSpeed(piles []int, h int) int {
	// 算出最小速度和最大速度
	minSpeed, maxSpeed := 1, 1
	for _, pile := range piles {
		if pile > maxSpeed {
			maxSpeed = pile
		}
	}

	for minSpeed <= maxSpeed {
		mid := minSpeed + (maxSpeed-minSpeed)/2
		if calcHours(piles, mid) <= h {
			maxSpeed = mid - 1
		} else {
			minSpeed = mid + 1
		}
	}

	return minSpeed
}

// 计算吃掉一堆香蕉需要花费的时间
func calcHours(piles []int, speed int) int {
	totalTime := 0
	for _, pile := range piles {
		x := float64(pile) / float64(speed)
		totalTime += int(math.Ceil(x))
	}

	return totalTime
}

// ------------------------------------------------------

func main() {
	//spells := []int{5, 1, 3}
	//positions := []int{1, 2, 3, 4, 5}
	//success := int64(7)
	//fmt.Println(successfulPairs(spells, positions, success))

	fmt.Println(minEatingSpeed([]int{3, 6, 7, 11}, 8))
}
